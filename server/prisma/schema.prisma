// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MONITER
}

enum RevenueType {
  monthly
  yearly
}

enum AnswerType {
  TEXT
  NUMBER
  BOOLEAN
  SELECT
}

enum TicketStatus {
  OPEN
  CLOSED
  PENDING
}

enum ListingStatus {
  PUBLISH
  DRAFT
}

enum ChatStatus {
  ACTIVE
  CLOSED
  FLAGGED
  ARCHIVED
}

model User {
  id                String          @id @default(uuid()) @map("_id")
  first_name        String?
  last_name         String?
  email             String
  phone             String?
  country_code      String?
  address           String?
  country           String?
  permissions       String[]
  role              Role
  state             String?
  refresh_token     String?
  password_hash     String
  otp_code          BigInt?
  zip_code          BigInt?
  background        String?
  is_email_verified Boolean         @default(false)
  support_ticket    SupportTicket[]
  is_phone_verified Boolean         @default(false)
  verified          Boolean         @default(false)
  favourite         Favourite[]
  chatsAsUser       ChatRoom[]      @relation("UserChats")
  chatsAsSeller     ChatRoom[]      @relation("SellerChats")
  monitoredChats    ChatRoom[]      @relation("MonitorChats")
  messages          Message[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  deleted_at        DateTime?

  listing     Listing[]
  preferences Preference?
}

model Favourite {
  id String @id @default(uuid()) @map("_id")

  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  userId     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Preference {
  id String @id @default(uuid()) @map("_id")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  businessCategory BusinessCategory[]
  niche            Niche[]
  financial        Financial?
}

model Financial {
  id              String  @id @default(uuid()) @map("_id")
  seller_location String?

  age_range              Range? @relation("ageRange")
  yearly_profit_range    Range? @relation("yearlyProfitRange")
  profit_multiple_range  Range? @relation("profitMultipleRange")
  revenue_multiple_range Range? @relation("revenueMultipleRange")

  preferenceId String?     @unique
  preference   Preference? @relation(fields: [preferenceId], references: [id])
}

model Range {
  id         String   @id @default(uuid()) @map("_id")
  min        String
  max        String
  country    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  age_id              String @unique
  yearly_profit_id    String @unique
  profit_multiple_id  String @unique
  revenue_multiple_id String @unique

  age              Financial? @relation("ageRange", fields: [age_id], references: [id])
  yearly_profit    Financial? @relation("yearlyProfitRange", fields: [yearly_profit_id], references: [id])
  profit_multiple  Financial? @relation("profitMultipleRange", fields: [profit_multiple_id], references: [id])
  revenue_multiple Financial? @relation("revenueMultipleRange", fields: [revenue_multiple_id], references: [id])
}

model Statistic {
  id                  String   @id @default(uuid()) @map("_id")
  conversion_rate     String?
  average_order_value String?
  returning_customer  String?
  email_subscribers   String[]
  refund_rate         String[]
  listingId           String?  @unique
  listing             Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  customer_base       String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  sales_channel        Channel[] @relation("SalesChannel")
  adverstising_channel Channel[] @relation("AdvertisingChannel")
  sales_countries      Channel[] @relation("SalesCountries")
}

model Channel {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  percentage String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  salesChannelId        String?
  adverstisingChannelId String?
  salesCountriesId      String?

  sales_channel        Statistic? @relation("SalesChannel", fields: [salesChannelId], references: [id], onDelete: Cascade)
  adverstising_channel Statistic? @relation("AdvertisingChannel", fields: [adverstisingChannelId], references: [id], onDelete: Cascade)
  sales_countries      Statistic? @relation("SalesCountries", fields: [salesCountriesId], references: [id], onDelete: Cascade)
}

model Listing {
  id                 String            @id @default(uuid()) @map("_id")
  status             ListingStatus
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  brand              Brand?
  category           ListingCategory[]
  tools              ListingTool[]
  financials         Revenue[]
  statistics         Statistic?
  productQuestion    ListingQuestion[] @relation("ProductQuestion")
  managementQuestion ListingQuestion[] @relation("ManageQuestion")
  social_account     SocialAccount[]
  advertisement      Advertisement?
  handover           Handover?
  Favourite          Favourite[]
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  deleted_at         DateTime?
}

model ListingCategory {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model BusinessCategory {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Preference   Preference? @relation(fields: [preferenceId], references: [id])
  preferenceId String?
}

model BusinessCategoryOption {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Niche {
  id String @id @default(uuid()) @map("_id")

  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Preference   Preference? @relation(fields: [preferenceId], references: [id])
  preferenceId String?
}

model NicheOption {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Plan {
  id            String   @id @default(uuid()) @map("_id")
  title         String
  description   String
  duration_type String
  type          String // Monthly or Yearly
  price         String
  feature       String[]
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model EmailTemplate {
  id         String   @id @default(uuid()) @map("_id")
  subject    String
  cc         String[]
  body       String
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  image_path String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ServiceTool {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  image_path String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ListingTool {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Listing    Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId  String?
}

model Brand {
  id                String   @id @default(uuid()) @map("_id")
  name              String
  domain            String[]
  business_location String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  listingId         String?  @unique
  listing           Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Revenue {
  id             String      @id @default(uuid()) @map("_id")
  type           RevenueType
  name           String
  revenue_amount String
  annual_cost    String
  net_profit     String?
  listingId      String
  listing        Listing?    @relation(fields: [listingId], references: [id], onDelete: Cascade)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model ListingQuestion {
  id          String      @id @default(uuid()) @map("_id")
  question    String?
  answer_for  String?
  answer_type AnswerType?
  answer      String?
  option      String[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  productQuestion      Listing? @relation("ProductQuestion", fields: [productQuestionId], references: [id], onDelete: Cascade)
  productQuestionId    String?
  managementQuestion   Listing? @relation("ManageQuestion", fields: [managementQuestionId], references: [id], onDelete: Cascade)
  managementQuestionId String?
}

model Question {
  id          String     @id @default(uuid()) @map("_id")
  question    String
  answer_type AnswerType
  option      String[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model SocialAccount {
  id         String   @id @default(uuid()) @map("_id")
  userId     String
  url        String?
  followers  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String?
}

model Advertisement {
  id          String   @id @default(uuid()) @map("_id")
  price       String
  title       String
  intro       String
  usp         String
  description String
  listingId   String?  @unique
  PhotoFile   File?    @relation("PhotoFile")
  Attachments File[]   @relation("Attachments")
  listing     Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model File {
  id         String   @id @default(uuid()) @map("_id")
  size       String
  path       String
  mime_type  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  photoId    String         @unique
  fileId     String?
  photo      Advertisement  @relation("PhotoFile", fields: [photoId], references: [id])
  attachment Advertisement? @relation("Attachments", fields: [fileId], references: [id])
}

model Handover {
  id              String   @id @default(uuid()) @map("_id")
  handover_option String[]
  is_sale_support String
  listingId       String?  @unique
  listing         Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)

  total_month String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model HandoverOption {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// User Chat System
model ChatRoom {
  id            String          @id @default(uuid()) @map("_id")
  user          User            @relation("UserChats", fields: [userId], references: [id])
  userId        String
  seller        User            @relation("SellerChats", fields: [sellerId], references: [id])
  sellerId      String
  monitor       User?           @relation("MonitorChats", fields: [monitorId], references: [id])
  monitorId     String? // optional
  messages      Message[]
  SupportTicket SupportTicket[]
  status        ChatStatus      @default(ACTIVE)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Message {
  id         String   @id @default(uuid()) @map("_id")
  chat       ChatRoom @relation(fields: [chatId], references: [id])
  chatId     String
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String
  senderRole Role
  content    String
  timestamp  DateTime @default(now())
  isEdited   Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  flagged    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SupportTicket {
  id         String       @id @default(uuid()) @map("_id")
  userId     String
  chatRoomId String?
  subject    String
  message    String
  status     TicketStatus @default(OPEN)
  createdAt  DateTime     @default(now())

  user     User         @relation(fields: [userId], references: [id])
  chatRoom ChatRoom?    @relation(fields: [chatRoomId], references: [id])
  files    TicketFile[]
}

model TicketFile {
  id              String         @id @default(uuid()) @map("_id")
  name            String
  path            String
  urls            String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  SupportTicket   SupportTicket? @relation(fields: [supportTicketId], references: [id])
  supportTicketId String?
}
